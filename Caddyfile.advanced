# Advanced Caddyfile Example
# Rename this to Caddyfile to use these advanced features

{
    email {$ACME_EMAIL}
    # Use staging server for testing (remove for production)
    # acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
}

# Main domain
{$DOMAIN} {
    # DNS challenge for Let's Encrypt
    tls {
        dns {$DNS_PROVIDER} {$DNS_API_TOKEN}
    }

    # Log all requests
    log {
        output file /data/{$DOMAIN}_access.log {
            roll_size 100mb
            roll_keep 5
            roll_keep_for 720h
        }
        format json
    }

    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        Permissions-Policy "geolocation=(), microphone=(), camera=()"
        -Server
    }

    # Compression
    encode gzip zstd

    # Reverse proxy with health checks
    reverse_proxy {$BACKEND_HOST}:{$BACKEND_PORT} {
        # Load balancing (if you have multiple backends)
        # lb_policy round_robin
        
        # Health check
        health_uri /health
        health_interval 30s
        health_timeout 5s
        health_status 200
        
        # Timeouts
        transport http {
            dial_timeout 10s
            response_header_timeout 30s
            read_timeout 0
            write_timeout 0
        }
        
        # Pass real IP
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
    }

    # Rate limiting (requires rate limiting plugin)
    # rate_limit {
    #     zone dynamic {
    #         key {remote_host}
    #         events 100
    #         window 1m
    #     }
    # }
}

# API subdomain
api.{$DOMAIN} {
    tls {
        dns {$DNS_PROVIDER} {$DNS_API_TOKEN}
    }

    # CORS for API
    @cors_preflight {
        method OPTIONS
    }
    
    handle @cors_preflight {
        header {
            Access-Control-Allow-Origin "*"
            Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
            Access-Control-Allow-Headers "Content-Type, Authorization"
            Access-Control-Max-Age "86400"
        }
        respond 204
    }

    header {
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization"
    }

    reverse_proxy localhost:3000
}

# Static file server subdomain
static.{$DOMAIN} {
    tls {
        dns {$DNS_PROVIDER} {$DNS_API_TOKEN}
    }

    root * /var/www/html
    file_server {
        index index.html
        browse
    }

    # Cache static assets
    header /static/* {
        Cache-Control "public, max-age=31536000, immutable"
    }
}

# WebSocket subdomain
ws.{$DOMAIN} {
    tls {
        dns {$DNS_PROVIDER} {$DNS_API_TOKEN}
    }

    reverse_proxy localhost:8080 {
        # Enable WebSocket
        header_up Upgrade {http.request.header.Upgrade}
        header_up Connection {http.request.header.Connection}
    }
}

# Catch-all for unknown subdomains
*.{$DOMAIN} {
    tls {
        dns {$DNS_PROVIDER} {$DNS_API_TOKEN}
    }
    
    respond "Subdomain not configured" 404
}

# HTTP to HTTPS redirect (automatic with Caddy, but can be explicit)
# http://{$DOMAIN} {
#     redir https://{$DOMAIN}{uri} permanent
# }
